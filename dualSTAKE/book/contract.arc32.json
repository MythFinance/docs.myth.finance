{
  "hints": {
    "queue_update_fees(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reset_update_fees()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure2(byte[],byte[],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_admin_1(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_admin_2()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_noderunner(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "change_feeaddr(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_max_balance(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verify_nfdomains(uint64,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_node_runner_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_platform_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keyreg_offline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "protest_stake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unprotest_stake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "admin_unprotest_stake(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dissolve_protesting_stake(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "queue_upgrade(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reset_upgrade()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "redeem()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_rate()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "ContractListing",
          "elements": [
            [
              "rate",
              "uint64"
            ],
            [
              "algo_balance",
              "uint64"
            ],
            [
              "asa_balance",
              "uint64"
            ],
            [
              "staked",
              "uint64"
            ],
            [
              "lst_id",
              "uint64"
            ],
            [
              "lst_name",
              "string"
            ],
            [
              "asa_id",
              "uint64"
            ],
            [
              "asa_name",
              "string"
            ],
            [
              "asa_unit_name",
              "string"
            ],
            [
              "asa_decimals",
              "uint16"
            ],
            [
              "need_swap",
              "bool"
            ],
            [
              "incentive_eligible",
              "bool"
            ],
            [
              "is_online",
              "bool"
            ],
            [
              "upgrading",
              "bool"
            ],
            [
              "user_protesting_stake",
              "uint64"
            ]
          ]
        }
      }
    },
    "get_rate_and_balances()(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_need_swap()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_or_fail()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "nullun()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCmludCAwCnJldHVybg=="
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "state": {
    "global": {
      "num_byte_slices": 32,
      "num_uints": 32
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "version": {
          "type": "uint64",
          "key": "v"
        },
        "asa_id": {
          "type": "uint64",
          "key": "asa_id"
        },
        "lst_id": {
          "type": "uint64",
          "key": "lst_id"
        },
        "staked": {
          "type": "uint64",
          "key": "staked"
        },
        "platform_fees": {
          "type": "uint64",
          "key": "platform_fees"
        },
        "noderunner_fees": {
          "type": "uint64",
          "key": "noderunner_fees"
        },
        "platform_fee_bps": {
          "type": "uint64",
          "key": "platform_fee_bps"
        },
        "noderunner_fee_bps": {
          "type": "uint64",
          "key": "noderunner_fee_bps"
        },
        "admin_addr": {
          "type": "bytes",
          "key": "admin_addr"
        },
        "fee_admin_addr": {
          "type": "bytes",
          "key": "fee_admin_addr"
        },
        "noderunner_addr": {
          "type": "bytes",
          "key": "noderunner_addr"
        },
        "lp_type": {
          "type": "bytes",
          "key": "lp_type"
        },
        "lp_id": {
          "type": "bytes",
          "key": "lp_id"
        },
        "delay_optin": {
          "type": "uint64",
          "key": "delay_optin"
        },
        "fee_update": {
          "type": "bytes",
          "key": "fee_update"
        },
        "contract_upgrade": {
          "type": "bytes",
          "key": "contract_upgrade"
        },
        "protest_count": {
          "type": "uint64",
          "key": "protest_cnt"
        },
        "protest_sum": {
          "type": "uint64",
          "key": "protest_sum"
        },
        "upgrade_period": {
          "type": "uint64",
          "key": "upgrade_period"
        },
        "fee_update_period": {
          "type": "uint64",
          "key": "fee_update_period"
        },
        "fee_update_max_delta": {
          "type": "uint64",
          "key": "fee_update_max_delta"
        },
        "max_balance": {
          "type": "uint64",
          "key": "max_balance"
        },
        "rate_precision": {
          "type": "uint64",
          "key": "rate_precision"
        },
        "tm2_app_id": {
          "type": "uint64",
          "key": "tm2_app_id"
        },
        "arc59_app_id": {
          "type": "uint64",
          "key": "arc59_app_id"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "dualSTAKE Contract",
    "methods": [
      {
        "name": "queue_update_fees",
        "args": [
          {
            "type": "uint64",
            "name": "new_platform_fee_bps"
          },
          {
            "type": "uint64",
            "name": "new_noderunner_fee_bps"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "desc": "Fee admin method. Changes enforced to +/- 2.5% delta max\nIf increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64"
      },
      {
        "name": "reset_update_fees",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Fee admin method. Cancel a scheudled params update"
      },
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "asa_id"
          },
          {
            "type": "byte[]",
            "name": "lp_type"
          },
          {
            "type": "byte[]",
            "name": "lp_id"
          },
          {
            "type": "uint64",
            "name": "platform_fee_bps"
          },
          {
            "type": "uint64",
            "name": "noderunner_fee_bps"
          },
          {
            "type": "address",
            "name": "admin_addr"
          },
          {
            "type": "address",
            "name": "fee_admin_addr"
          },
          {
            "type": "address",
            "name": "noderunner_addr"
          },
          {
            "type": "bool",
            "name": "delay_optin"
          },
          {
            "type": "uint64",
            "name": "max_balance"
          },
          {
            "type": "uint64",
            "name": "upgrade_period"
          },
          {
            "type": "uint64",
            "name": "fee_update_period"
          },
          {
            "type": "uint64",
            "name": "fee_update_max_delta"
          },
          {
            "type": "uint64",
            "name": "rate_precision"
          },
          {
            "type": "uint64",
            "name": "tm2_app_id"
          },
          {
            "type": "uint64",
            "name": "arc59_app_id"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Admin or fee admin method. Bootstrap; configure global storage except LST ID."
      },
      {
        "name": "configure2",
        "args": [
          {
            "type": "byte[]",
            "name": "lst_asa_name"
          },
          {
            "type": "byte[]",
            "name": "lst_unit_name"
          },
          {
            "type": "byte[]",
            "name": "lst_url"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "change_admin_1",
        "args": [
          {
            "type": "address",
            "name": "new_admin"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "admin method. first of 2-step admin change process."
      },
      {
        "name": "change_admin_2",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1"
      },
      {
        "name": "change_noderunner",
        "args": [
          {
            "type": "address",
            "name": "new_noderunner"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "fee admin/node runner method. change node runner address.\nnode runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees."
      },
      {
        "name": "change_feeaddr",
        "args": [
          {
            "type": "address",
            "name": "new_feeaddr"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "admin/fee admin method. change fee admin address"
      },
      {
        "name": "update_max_balance",
        "args": [
          {
            "type": "uint64",
            "name": "new_max_balance"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fee admin method. Updates max algo stake"
      },
      {
        "name": "verify_nfdomains",
        "args": [
          {
            "type": "uint64",
            "name": "registry_app_id"
          },
          {
            "type": "uint64",
            "name": "nfd_app_id"
          },
          {
            "type": "byte[]",
            "name": "name"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw_node_runner_fees",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.\nthe fee admin may call this to pay out the current node runner before changing node runner address"
      },
      {
        "name": "withdraw_platform_fees",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "fee admin method. withdraw platform fees"
      },
      {
        "name": "keyreg_online",
        "args": [
          {
            "type": "byte[]",
            "name": "selection_key"
          },
          {
            "type": "byte[]",
            "name": "voting_key"
          },
          {
            "type": "byte[]",
            "name": "sp_key"
          },
          {
            "type": "uint64",
            "name": "first_round"
          },
          {
            "type": "uint64",
            "name": "last_round"
          },
          {
            "type": "uint64",
            "name": "key_dilution"
          },
          {
            "type": "uint64",
            "name": "fee"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Fee admin or node runner only. Send keyreg online.\nRequired payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter"
      },
      {
        "name": "keyreg_offline",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Fee admin or noderunner only. Send keyreg offline for an escrow account"
      },
      {
        "name": "protest_stake",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "public method. locks dualSTAKE LST stake on the contract as \"upgrade protest\".\nThis blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged"
      },
      {
        "name": "unprotest_stake",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them."
      },
      {
        "name": "admin_unprotest_stake",
        "args": [
          {
            "type": "address",
            "name": "user"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves."
      },
      {
        "name": "dissolve_protesting_stake",
        "args": [
          {
            "type": "address",
            "name": "user"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.\nIf the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount."
      },
      {
        "name": "queue_upgrade",
        "args": [
          {
            "type": "byte[]",
            "name": "hashes"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "admin method only.\nstage a contract upgrade. time applicability 1 week from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages"
      },
      {
        "name": "reset_upgrade",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "admin or fee admin only.\nclear a staged contract upgrade"
      },
      {
        "name": "mint",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Public method. Mint dualSTAKE lst\nNEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller"
      },
      {
        "name": "redeem",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Public method. Redeem dualSTAKE tokens back to ALGO+ASA.\ndualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed"
      },
      {
        "name": "get_rate",
        "args": [],
        "returns": {
          "type": "uint64"
        },
        "desc": "Public method. Returns the current rate as ABI uint64:\n(rate_precision global var, default 1e10) * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed"
      },
      {
        "name": "get_contract_listing",
        "args": [
          {
            "type": "address",
            "name": "user"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)"
        },
        "desc": "Public method. Returns ABI struct ContractListing:\nrate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed"
      },
      {
        "name": "get_rate_and_balances",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64)"
        },
        "desc": "Public method. Returns ABI tuple[3]:\nrate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed"
      },
      {
        "name": "get_need_swap",
        "args": [],
        "returns": {
          "type": "bool"
        },
        "desc": "Public method. Returns whether the contract thinks it needs to swap"
      },
      {
        "name": "swap_or_fail",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Public method. Perform swap or fail"
      },
      {
        "name": "nullun",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Public empty method for opcode budget increase"
      }
    ],
    "networks": {}
  }
}